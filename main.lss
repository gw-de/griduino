
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000007c6  0000085a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080007a  0080007a  00000874  2**0
                  ALLOC
  3 .stab         00000900  00000000  00000000  00000874  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cc6  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001e3a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e4c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	fc c0       	rjmp	.+504    	; 0x1fc <__vector_1>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	31 c1       	rjmp	.+610    	; 0x27a <__vector_11>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e6 ec       	ldi	r30, 0xC6	; 198
  36:	f7 e0       	ldi	r31, 0x07	; 7
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	aa 37       	cpi	r26, 0x7A	; 122
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	aa e7       	ldi	r26, 0x7A	; 122
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a6 38       	cpi	r26, 0x86	; 134
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	58 d1       	rcall	.+688    	; 0x306 <main>
  56:	b5 c3       	rjmp	.+1898   	; 0x7c2 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <numberToDisplay>:
unsigned long counter;                //a global variable used as counter/timer
float         temp;                   //variable for calculation


//function to display numbers
void numberToDisplay(int x){
  5a:	9c 01       	movw	r18, r24
  //check if x is over 100
  if (x >= 100){
  5c:	84 36       	cpi	r24, 0x64	; 100
  5e:	91 05       	cpc	r25, r1
  60:	34 f0       	brlt	.+12     	; 0x6e <numberToDisplay+0x14>
    redLED = 1;   //set red LED
  62:	81 e0       	ldi	r24, 0x01	; 1
  64:	80 93 61 00 	sts	0x0061, r24
    x -= 100;     //cut the 3rd digit (100) off
  68:	24 56       	subi	r18, 0x64	; 100
  6a:	31 09       	sbc	r19, r1
  6c:	02 c0       	rjmp	.+4      	; 0x72 <numberToDisplay+0x18>
  }
  else{
    redLED = 0;   //if not over 100 reset red LED to off
  6e:	10 92 61 00 	sts	0x0061, r1
  }


  //number for display 1
  //for loop counting down from 9 to 0
  for(int i = 9; i >= 0; i--){
  72:	e9 e0       	ldi	r30, 0x09	; 9
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	cf 01       	movw	r24, r30
  78:	01 96       	adiw	r24, 0x01	; 1
  7a:	6a e0       	ldi	r22, 0x0A	; 10
  7c:	70 e0       	ldi	r23, 0x00	; 0
  7e:	69 d3       	rcall	.+1746   	; 0x752 <__mulhi3>
      //true if x is less than i*10+10 (e.g. 9*10+10=100 for i=9) and greater/equals than i*10 (e.g. 9*10=90)
      if(x < i*10+10 && x >= i*10){
  80:	28 17       	cp	r18, r24
  82:	39 07       	cpc	r19, r25
  84:	8c f4       	brge	.+34     	; 0xa8 <numberToDisplay+0x4e>
  86:	0a 97       	sbiw	r24, 0x0a	; 10
  88:	28 17       	cp	r18, r24
  8a:	39 07       	cpc	r19, r25
  8c:	6c f0       	brlt	.+26     	; 0xa8 <numberToDisplay+0x4e>
          //if true save digit with value of i to display 1
          disp1 = ziffern[0][i];
  8e:	df 01       	movw	r26, r30
  90:	ac 59       	subi	r26, 0x9C	; 156
  92:	bf 4f       	sbci	r27, 0xFF	; 255
  94:	8c 91       	ld	r24, X
  96:	80 93 7b 00 	sts	0x007B, r24
          //cut 2nd digit off
          x -= i*10;
  9a:	cf 01       	movw	r24, r30
  9c:	66 ef       	ldi	r22, 0xF6	; 246
  9e:	7f ef       	ldi	r23, 0xFF	; 255
  a0:	58 d3       	rcall	.+1712   	; 0x752 <__mulhi3>
  a2:	28 0f       	add	r18, r24
  a4:	39 1f       	adc	r19, r25
          //correct digit found, then break the loop
          break;
  a6:	02 c0       	rjmp	.+4      	; 0xac <numberToDisplay+0x52>
  }


  //number for display 1
  //for loop counting down from 9 to 0
  for(int i = 9; i >= 0; i--){
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	28 f7       	brcc	.-54     	; 0x76 <numberToDisplay+0x1c>
      }
  }

  //number for display 2
  //check if rest value equals 0
  if(x==0){
  ac:	21 15       	cp	r18, r1
  ae:	31 05       	cpc	r19, r1
  b0:	19 f4       	brne	.+6      	; 0xb8 <numberToDisplay+0x5e>
      disp2 = ziffern[1][0];
  b2:	80 91 6f 00 	lds	r24, 0x006F
  b6:	0a c0       	rjmp	.+20     	; 0xcc <numberToDisplay+0x72>
  b8:	e9 e0       	ldi	r30, 0x09	; 9
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  }
  else{
      //for loop counting down from 9 to 1
      for(int i = 9; i > 0; i--) {
          //if x equals i the modulo will give 0
          if(x % i == 0){
  bc:	c9 01       	movw	r24, r18
  be:	bf 01       	movw	r22, r30
  c0:	59 d3       	rcall	.+1714   	; 0x774 <__divmodhi4>
  c2:	89 2b       	or	r24, r25
  c4:	31 f4       	brne	.+12     	; 0xd2 <numberToDisplay+0x78>
              //assign the value of i to display 2
              disp2 = ziffern[1][i];
  c6:	ec 59       	subi	r30, 0x9C	; 156
  c8:	ff 4f       	sbci	r31, 0xFF	; 255
  ca:	83 85       	ldd	r24, Z+11	; 0x0b
  cc:	80 93 63 00 	sts	0x0063, r24
              //correct digit found, then break the loop
              break;
  d0:	08 95       	ret
  if(x==0){
      disp2 = ziffern[1][0];
  }
  else{
      //for loop counting down from 9 to 1
      for(int i = 9; i > 0; i--) {
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	99 f7       	brne	.-26     	; 0xbc <numberToDisplay+0x62>
  d6:	08 95       	ret

000000d8 <Multiplexer>:


//function for multiplexer
void Multiplexer (void){
  //at mux = 0 and if blueLED is set turn on blue LED, skipped when blueLED is off
  if(mux == 0 && blueLED == 1){
  d8:	80 91 7a 00 	lds	r24, 0x007A
  dc:	81 11       	cpse	r24, r1
  de:	09 c0       	rjmp	.+18     	; 0xf2 <Multiplexer+0x1a>
  e0:	80 91 62 00 	lds	r24, 0x0062
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	a9 f4       	brne	.+42     	; 0x112 <Multiplexer+0x3a>
      PORTA = 0xAC;
  e8:	8c ea       	ldi	r24, 0xAC	; 172
  ea:	8b bb       	out	0x1b, r24	; 27
      PORTA |= 0x80;
  ec:	df 9a       	sbi	0x1b, 7	; 27
      PORTA &= ~0x10;
  ee:	dc 98       	cbi	0x1b, 4	; 27
  f0:	13 c0       	rjmp	.+38     	; 0x118 <Multiplexer+0x40>
  }
  //at mux = 1 show display 1
  else if (mux == 1){
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	19 f4       	brne	.+6      	; 0xfc <Multiplexer+0x24>
      PORTA = disp1;
  f6:	80 91 7b 00 	lds	r24, 0x007B
  fa:	0d c0       	rjmp	.+26     	; 0x116 <Multiplexer+0x3e>
  }
  //at mux = 2 and if redLED is set turn on red LED, skipped when redLED is off
  else if(mux == 2 && redLED == 1){
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	49 f4       	brne	.+18     	; 0x112 <Multiplexer+0x3a>
 100:	80 91 61 00 	lds	r24, 0x0061
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	29 f4       	brne	.+10     	; 0x112 <Multiplexer+0x3a>
      PORTA = 0x28;
 108:	88 e2       	ldi	r24, 0x28	; 40
 10a:	8b bb       	out	0x1b, r24	; 27
      PORTA |= 0x20;
 10c:	dd 9a       	sbi	0x1b, 5	; 27
      PORTA &= ~0x04;
 10e:	da 98       	cbi	0x1b, 2	; 27
 110:	03 c0       	rjmp	.+6      	; 0x118 <Multiplexer+0x40>
  }
  //else (so if mux = 4) show display 2
  else{
      PORTA = disp2;
 112:	80 91 63 00 	lds	r24, 0x0063
 116:	8b bb       	out	0x1b, r24	; 27
  }

  //multiplexer counting up and keeping from 0 to 3
  mux++;
 118:	80 91 7a 00 	lds	r24, 0x007A
 11c:	8f 5f       	subi	r24, 0xFF	; 255
  mux%=4;
 11e:	83 70       	andi	r24, 0x03	; 3
 120:	80 93 7a 00 	sts	0x007A, r24
 124:	08 95       	ret

00000126 <calculateMeasurement>:
}


//function for calculation and setting blue LED
int calculateMeasurement (void){
 126:	cf 92       	push	r12
 128:	df 92       	push	r13
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
  //calculating real frequency, if counter is over ideal the resulting frequency is less than 50
  temp = 50.0 * 1600.0 * (float)seconds / (float) counter;
 12e:	60 91 60 00 	lds	r22, 0x0060
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	ef d1       	rcall	.+990    	; 0x518 <__floatunsisf>
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e4       	ldi	r19, 0x40	; 64
 13e:	4c e9       	ldi	r20, 0x9C	; 156
 140:	57 e4       	ldi	r21, 0x47	; 71
 142:	9c d2       	rcall	.+1336   	; 0x67c <__mulsf3>
 144:	6b 01       	movw	r12, r22
 146:	7c 01       	movw	r14, r24
 148:	60 91 82 00 	lds	r22, 0x0082
 14c:	70 91 83 00 	lds	r23, 0x0083
 150:	80 91 84 00 	lds	r24, 0x0084
 154:	90 91 85 00 	lds	r25, 0x0085
 158:	df d1       	rcall	.+958    	; 0x518 <__floatunsisf>
 15a:	9b 01       	movw	r18, r22
 15c:	ac 01       	movw	r20, r24
 15e:	c7 01       	movw	r24, r14
 160:	b6 01       	movw	r22, r12
 162:	41 d1       	rcall	.+642    	; 0x3e6 <__divsf3>
 164:	6b 01       	movw	r12, r22
 166:	7c 01       	movw	r14, r24

  //if less than ideal 50Hz set blueLED and calculate difference up to 50
  if (temp < 50.0){
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	48 e4       	ldi	r20, 0x48	; 72
 16e:	52 e4       	ldi	r21, 0x42	; 66
 170:	36 d1       	rcall	.+620    	; 0x3de <__cmpsf2>
 172:	87 ff       	sbrs	r24, 7
 174:	0a c0       	rjmp	.+20     	; 0x18a <calculateMeasurement+0x64>
    blueLED = 1;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	80 93 62 00 	sts	0x0062, r24
    temp = 50.0 - temp;
 17c:	a7 01       	movw	r20, r14
 17e:	96 01       	movw	r18, r12
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	88 e4       	ldi	r24, 0x48	; 72
 186:	92 e4       	ldi	r25, 0x42	; 66
 188:	08 c0       	rjmp	.+16     	; 0x19a <calculateMeasurement+0x74>
  }
  //else reset blueLED and calculate difference from 50
  else{
    blueLED = 0;
 18a:	10 92 62 00 	sts	0x0062, r1
    temp = temp - 50.0;
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	48 e4       	ldi	r20, 0x48	; 72
 194:	52 e4       	ldi	r21, 0x42	; 66
 196:	c7 01       	movw	r24, r14
 198:	b6 01       	movw	r22, r12
 19a:	bc d0       	rcall	.+376    	; 0x314 <__subsf3>
 19c:	60 93 7c 00 	sts	0x007C, r22
 1a0:	70 93 7d 00 	sts	0x007D, r23
 1a4:	80 93 7e 00 	sts	0x007E, r24
 1a8:	90 93 7f 00 	sts	0x007F, r25
  }

  //convert to mHz
  temp *= 1000.0;
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	4a e7       	ldi	r20, 0x7A	; 122
 1b2:	54 e4       	ldi	r21, 0x44	; 68
 1b4:	60 91 7c 00 	lds	r22, 0x007C
 1b8:	70 91 7d 00 	lds	r23, 0x007D
 1bc:	80 91 7e 00 	lds	r24, 0x007E
 1c0:	90 91 7f 00 	lds	r25, 0x007F
 1c4:	5b d2       	rcall	.+1206   	; 0x67c <__mulsf3>
 1c6:	60 93 7c 00 	sts	0x007C, r22
 1ca:	70 93 7d 00 	sts	0x007D, r23
 1ce:	80 93 7e 00 	sts	0x007E, r24
 1d2:	90 93 7f 00 	sts	0x007F, r25

  //reset edge counter and time counter
  edges_counter = 0;
 1d6:	10 92 81 00 	sts	0x0081, r1
 1da:	10 92 80 00 	sts	0x0080, r1
  counter = 0;
 1de:	10 92 82 00 	sts	0x0082, r1
 1e2:	10 92 83 00 	sts	0x0083, r1
 1e6:	10 92 84 00 	sts	0x0084, r1
 1ea:	10 92 85 00 	sts	0x0085, r1

  //cast to int and return to showing
  return (int)temp;
 1ee:	63 d1       	rcall	.+710    	; 0x4b6 <__fixsfsi>
}
 1f0:	cb 01       	movw	r24, r22
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	df 90       	pop	r13
 1f8:	cf 90       	pop	r12
 1fa:	08 95       	ret

000001fc <__vector_1>:


//is called every time an edge is detected on the input
ISR(INT0_vect){
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	2f 93       	push	r18
 208:	3f 93       	push	r19
 20a:	4f 93       	push	r20
 20c:	5f 93       	push	r21
 20e:	6f 93       	push	r22
 210:	7f 93       	push	r23
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	af 93       	push	r26
 218:	bf 93       	push	r27
 21a:	ef 93       	push	r30
 21c:	ff 93       	push	r31
  //count edges
  edges_counter++;
 21e:	20 91 80 00 	lds	r18, 0x0080
 222:	30 91 81 00 	lds	r19, 0x0081
 226:	2f 5f       	subi	r18, 0xFF	; 255
 228:	3f 4f       	sbci	r19, 0xFF	; 255
 22a:	30 93 81 00 	sts	0x0081, r19
 22e:	20 93 80 00 	sts	0x0080, r18

  //after x seconds calculate the output
  if (edges_counter == 100*seconds) {
 232:	80 91 60 00 	lds	r24, 0x0060
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	64 e6       	ldi	r22, 0x64	; 100
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	8a d2       	rcall	.+1300   	; 0x752 <__mulhi3>
 23e:	28 17       	cp	r18, r24
 240:	39 07       	cpc	r19, r25
 242:	51 f4       	brne	.+20     	; 0x258 <__vector_1+0x5c>
     numberToDisplay(calculateMeasurement());
 244:	70 df       	rcall	.-288    	; 0x126 <calculateMeasurement>
 246:	09 df       	rcall	.-494    	; 0x5a <numberToDisplay>

     //reset the calculation value
     temp = 0.0;
 248:	10 92 7c 00 	sts	0x007C, r1
 24c:	10 92 7d 00 	sts	0x007D, r1
 250:	10 92 7e 00 	sts	0x007E, r1
 254:	10 92 7f 00 	sts	0x007F, r1
  }
}
 258:	ff 91       	pop	r31
 25a:	ef 91       	pop	r30
 25c:	bf 91       	pop	r27
 25e:	af 91       	pop	r26
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	7f 91       	pop	r23
 266:	6f 91       	pop	r22
 268:	5f 91       	pop	r21
 26a:	4f 91       	pop	r20
 26c:	3f 91       	pop	r19
 26e:	2f 91       	pop	r18
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <__vector_11>:


//function that is called after the defined timer frequency
ISR(TIM0_OVF_vect){
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	2f 93       	push	r18
 286:	3f 93       	push	r19
 288:	4f 93       	push	r20
 28a:	5f 93       	push	r21
 28c:	6f 93       	push	r22
 28e:	7f 93       	push	r23
 290:	8f 93       	push	r24
 292:	9f 93       	push	r25
 294:	af 93       	push	r26
 296:	bf 93       	push	r27
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
   counter++;
 29c:	80 91 82 00 	lds	r24, 0x0082
 2a0:	90 91 83 00 	lds	r25, 0x0083
 2a4:	a0 91 84 00 	lds	r26, 0x0084
 2a8:	b0 91 85 00 	lds	r27, 0x0085
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	a1 1d       	adc	r26, r1
 2b0:	b1 1d       	adc	r27, r1
 2b2:	80 93 82 00 	sts	0x0082, r24
 2b6:	90 93 83 00 	sts	0x0083, r25
 2ba:	a0 93 84 00 	sts	0x0084, r26
 2be:	b0 93 85 00 	sts	0x0085, r27

   //call the multiplexer
   Multiplexer();
 2c2:	0a df       	rcall	.-492    	; 0xd8 <Multiplexer>
}
 2c4:	ff 91       	pop	r31
 2c6:	ef 91       	pop	r30
 2c8:	bf 91       	pop	r27
 2ca:	af 91       	pop	r26
 2cc:	9f 91       	pop	r25
 2ce:	8f 91       	pop	r24
 2d0:	7f 91       	pop	r23
 2d2:	6f 91       	pop	r22
 2d4:	5f 91       	pop	r21
 2d6:	4f 91       	pop	r20
 2d8:	3f 91       	pop	r19
 2da:	2f 91       	pop	r18
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <start_edge_detection>:


//starts edge detection
void start_edge_detection(void){
    DDRB&=~0x04;    //PB2 is configures for input for counting the edges
 2e6:	ba 98       	cbi	0x17, 2	; 23
    MCUCR|=0x03;    //rising edge detection for INT0
 2e8:	85 b7       	in	r24, 0x35	; 53
 2ea:	83 60       	ori	r24, 0x03	; 3
 2ec:	85 bf       	out	0x35, r24	; 53
    GIMSK|=0x40;    //enable interrupt/automatic call of ISR(INT0_vect)
 2ee:	8b b7       	in	r24, 0x3b	; 59
 2f0:	80 64       	ori	r24, 0x40	; 64
 2f2:	8b bf       	out	0x3b, r24	; 59
    sei();      //enable all interrupts globally
 2f4:	78 94       	sei
 2f6:	08 95       	ret

000002f8 <configure_timer0>:
#define CALL_FREQUENCY_12dot5HZ 0x05


//configures the timer call frequency
void configure_timer0(unsigned char freq){
    TCCR0A=0x00;    //normal mode
 2f8:	10 be       	out	0x30, r1	; 48
    TCCR0B=freq;    //prescaler frequency
 2fa:	83 bf       	out	0x33, r24	; 51
    TIMSK0|=0x01;   //enable interrupt/automatic call of ISR(TIM0_OVF_vect)
 2fc:	89 b7       	in	r24, 0x39	; 57
 2fe:	81 60       	ori	r24, 0x01	; 1
 300:	89 bf       	out	0x39, r24	; 57
    sei();      //enable all interrupts globally
 302:	78 94       	sei
 304:	08 95       	ret

00000306 <main>:
}


int main(void){
    configure_timer0(CALL_FREQUENCY_1600HZ);   //defines the frequency the timer is called
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	f7 df       	rcall	.-18     	; 0x2f8 <configure_timer0>

    start_edge_detection();         //start edge detection
 30a:	ed df       	rcall	.-38     	; 0x2e6 <start_edge_detection>

    DDRA=0xFF;              //all port pins of port A are configured for output
 30c:	8f ef       	ldi	r24, 0xFF	; 255
 30e:	8a bb       	out	0x1a, r24	; 26
    PORTA=0xFF;             //all port pins of port A are outputting logic 1
 310:	8b bb       	out	0x1b, r24	; 27

    while(1){               //do nothing for now and let the ISR functions do their job

    }
 312:	ff cf       	rjmp	.-2      	; 0x312 <main+0xc>

00000314 <__subsf3>:
 314:	50 58       	subi	r21, 0x80	; 128

00000316 <__addsf3>:
 316:	bb 27       	eor	r27, r27
 318:	aa 27       	eor	r26, r26
 31a:	0e d0       	rcall	.+28     	; 0x338 <__addsf3x>
 31c:	75 c1       	rjmp	.+746    	; 0x608 <__fp_round>
 31e:	66 d1       	rcall	.+716    	; 0x5ec <__fp_pscA>
 320:	30 f0       	brcs	.+12     	; 0x32e <__addsf3+0x18>
 322:	6b d1       	rcall	.+726    	; 0x5fa <__fp_pscB>
 324:	20 f0       	brcs	.+8      	; 0x32e <__addsf3+0x18>
 326:	31 f4       	brne	.+12     	; 0x334 <__addsf3+0x1e>
 328:	9f 3f       	cpi	r25, 0xFF	; 255
 32a:	11 f4       	brne	.+4      	; 0x330 <__addsf3+0x1a>
 32c:	1e f4       	brtc	.+6      	; 0x334 <__addsf3+0x1e>
 32e:	5b c1       	rjmp	.+694    	; 0x5e6 <__fp_nan>
 330:	0e f4       	brtc	.+2      	; 0x334 <__addsf3+0x1e>
 332:	e0 95       	com	r30
 334:	e7 fb       	bst	r30, 7
 336:	51 c1       	rjmp	.+674    	; 0x5da <__fp_inf>

00000338 <__addsf3x>:
 338:	e9 2f       	mov	r30, r25
 33a:	77 d1       	rcall	.+750    	; 0x62a <__fp_split3>
 33c:	80 f3       	brcs	.-32     	; 0x31e <__addsf3+0x8>
 33e:	ba 17       	cp	r27, r26
 340:	62 07       	cpc	r22, r18
 342:	73 07       	cpc	r23, r19
 344:	84 07       	cpc	r24, r20
 346:	95 07       	cpc	r25, r21
 348:	18 f0       	brcs	.+6      	; 0x350 <__addsf3x+0x18>
 34a:	71 f4       	brne	.+28     	; 0x368 <__addsf3x+0x30>
 34c:	9e f5       	brtc	.+102    	; 0x3b4 <__addsf3x+0x7c>
 34e:	8f c1       	rjmp	.+798    	; 0x66e <__fp_zero>
 350:	0e f4       	brtc	.+2      	; 0x354 <__addsf3x+0x1c>
 352:	e0 95       	com	r30
 354:	0b 2e       	mov	r0, r27
 356:	ba 2f       	mov	r27, r26
 358:	a0 2d       	mov	r26, r0
 35a:	0b 01       	movw	r0, r22
 35c:	b9 01       	movw	r22, r18
 35e:	90 01       	movw	r18, r0
 360:	0c 01       	movw	r0, r24
 362:	ca 01       	movw	r24, r20
 364:	a0 01       	movw	r20, r0
 366:	11 24       	eor	r1, r1
 368:	ff 27       	eor	r31, r31
 36a:	59 1b       	sub	r21, r25
 36c:	99 f0       	breq	.+38     	; 0x394 <__addsf3x+0x5c>
 36e:	59 3f       	cpi	r21, 0xF9	; 249
 370:	50 f4       	brcc	.+20     	; 0x386 <__addsf3x+0x4e>
 372:	50 3e       	cpi	r21, 0xE0	; 224
 374:	68 f1       	brcs	.+90     	; 0x3d0 <__addsf3x+0x98>
 376:	1a 16       	cp	r1, r26
 378:	f0 40       	sbci	r31, 0x00	; 0
 37a:	a2 2f       	mov	r26, r18
 37c:	23 2f       	mov	r18, r19
 37e:	34 2f       	mov	r19, r20
 380:	44 27       	eor	r20, r20
 382:	58 5f       	subi	r21, 0xF8	; 248
 384:	f3 cf       	rjmp	.-26     	; 0x36c <__addsf3x+0x34>
 386:	46 95       	lsr	r20
 388:	37 95       	ror	r19
 38a:	27 95       	ror	r18
 38c:	a7 95       	ror	r26
 38e:	f0 40       	sbci	r31, 0x00	; 0
 390:	53 95       	inc	r21
 392:	c9 f7       	brne	.-14     	; 0x386 <__addsf3x+0x4e>
 394:	7e f4       	brtc	.+30     	; 0x3b4 <__addsf3x+0x7c>
 396:	1f 16       	cp	r1, r31
 398:	ba 0b       	sbc	r27, r26
 39a:	62 0b       	sbc	r22, r18
 39c:	73 0b       	sbc	r23, r19
 39e:	84 0b       	sbc	r24, r20
 3a0:	ba f0       	brmi	.+46     	; 0x3d0 <__addsf3x+0x98>
 3a2:	91 50       	subi	r25, 0x01	; 1
 3a4:	a1 f0       	breq	.+40     	; 0x3ce <__addsf3x+0x96>
 3a6:	ff 0f       	add	r31, r31
 3a8:	bb 1f       	adc	r27, r27
 3aa:	66 1f       	adc	r22, r22
 3ac:	77 1f       	adc	r23, r23
 3ae:	88 1f       	adc	r24, r24
 3b0:	c2 f7       	brpl	.-16     	; 0x3a2 <__addsf3x+0x6a>
 3b2:	0e c0       	rjmp	.+28     	; 0x3d0 <__addsf3x+0x98>
 3b4:	ba 0f       	add	r27, r26
 3b6:	62 1f       	adc	r22, r18
 3b8:	73 1f       	adc	r23, r19
 3ba:	84 1f       	adc	r24, r20
 3bc:	48 f4       	brcc	.+18     	; 0x3d0 <__addsf3x+0x98>
 3be:	87 95       	ror	r24
 3c0:	77 95       	ror	r23
 3c2:	67 95       	ror	r22
 3c4:	b7 95       	ror	r27
 3c6:	f7 95       	ror	r31
 3c8:	9e 3f       	cpi	r25, 0xFE	; 254
 3ca:	08 f0       	brcs	.+2      	; 0x3ce <__addsf3x+0x96>
 3cc:	b3 cf       	rjmp	.-154    	; 0x334 <__addsf3+0x1e>
 3ce:	93 95       	inc	r25
 3d0:	88 0f       	add	r24, r24
 3d2:	08 f0       	brcs	.+2      	; 0x3d6 <__addsf3x+0x9e>
 3d4:	99 27       	eor	r25, r25
 3d6:	ee 0f       	add	r30, r30
 3d8:	97 95       	ror	r25
 3da:	87 95       	ror	r24
 3dc:	08 95       	ret

000003de <__cmpsf2>:
 3de:	d9 d0       	rcall	.+434    	; 0x592 <__fp_cmp>
 3e0:	08 f4       	brcc	.+2      	; 0x3e4 <__cmpsf2+0x6>
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	08 95       	ret

000003e6 <__divsf3>:
 3e6:	0c d0       	rcall	.+24     	; 0x400 <__divsf3x>
 3e8:	0f c1       	rjmp	.+542    	; 0x608 <__fp_round>
 3ea:	07 d1       	rcall	.+526    	; 0x5fa <__fp_pscB>
 3ec:	40 f0       	brcs	.+16     	; 0x3fe <__divsf3+0x18>
 3ee:	fe d0       	rcall	.+508    	; 0x5ec <__fp_pscA>
 3f0:	30 f0       	brcs	.+12     	; 0x3fe <__divsf3+0x18>
 3f2:	21 f4       	brne	.+8      	; 0x3fc <__divsf3+0x16>
 3f4:	5f 3f       	cpi	r21, 0xFF	; 255
 3f6:	19 f0       	breq	.+6      	; 0x3fe <__divsf3+0x18>
 3f8:	f0 c0       	rjmp	.+480    	; 0x5da <__fp_inf>
 3fa:	51 11       	cpse	r21, r1
 3fc:	39 c1       	rjmp	.+626    	; 0x670 <__fp_szero>
 3fe:	f3 c0       	rjmp	.+486    	; 0x5e6 <__fp_nan>

00000400 <__divsf3x>:
 400:	14 d1       	rcall	.+552    	; 0x62a <__fp_split3>
 402:	98 f3       	brcs	.-26     	; 0x3ea <__divsf3+0x4>

00000404 <__divsf3_pse>:
 404:	99 23       	and	r25, r25
 406:	c9 f3       	breq	.-14     	; 0x3fa <__divsf3+0x14>
 408:	55 23       	and	r21, r21
 40a:	b1 f3       	breq	.-20     	; 0x3f8 <__divsf3+0x12>
 40c:	95 1b       	sub	r25, r21
 40e:	55 0b       	sbc	r21, r21
 410:	bb 27       	eor	r27, r27
 412:	aa 27       	eor	r26, r26
 414:	62 17       	cp	r22, r18
 416:	73 07       	cpc	r23, r19
 418:	84 07       	cpc	r24, r20
 41a:	38 f0       	brcs	.+14     	; 0x42a <__divsf3_pse+0x26>
 41c:	9f 5f       	subi	r25, 0xFF	; 255
 41e:	5f 4f       	sbci	r21, 0xFF	; 255
 420:	22 0f       	add	r18, r18
 422:	33 1f       	adc	r19, r19
 424:	44 1f       	adc	r20, r20
 426:	aa 1f       	adc	r26, r26
 428:	a9 f3       	breq	.-22     	; 0x414 <__divsf3_pse+0x10>
 42a:	33 d0       	rcall	.+102    	; 0x492 <__divsf3_pse+0x8e>
 42c:	0e 2e       	mov	r0, r30
 42e:	3a f0       	brmi	.+14     	; 0x43e <__divsf3_pse+0x3a>
 430:	e0 e8       	ldi	r30, 0x80	; 128
 432:	30 d0       	rcall	.+96     	; 0x494 <__divsf3_pse+0x90>
 434:	91 50       	subi	r25, 0x01	; 1
 436:	50 40       	sbci	r21, 0x00	; 0
 438:	e6 95       	lsr	r30
 43a:	00 1c       	adc	r0, r0
 43c:	ca f7       	brpl	.-14     	; 0x430 <__divsf3_pse+0x2c>
 43e:	29 d0       	rcall	.+82     	; 0x492 <__divsf3_pse+0x8e>
 440:	fe 2f       	mov	r31, r30
 442:	27 d0       	rcall	.+78     	; 0x492 <__divsf3_pse+0x8e>
 444:	66 0f       	add	r22, r22
 446:	77 1f       	adc	r23, r23
 448:	88 1f       	adc	r24, r24
 44a:	bb 1f       	adc	r27, r27
 44c:	26 17       	cp	r18, r22
 44e:	37 07       	cpc	r19, r23
 450:	48 07       	cpc	r20, r24
 452:	ab 07       	cpc	r26, r27
 454:	b0 e8       	ldi	r27, 0x80	; 128
 456:	09 f0       	breq	.+2      	; 0x45a <__divsf3_pse+0x56>
 458:	bb 0b       	sbc	r27, r27
 45a:	80 2d       	mov	r24, r0
 45c:	bf 01       	movw	r22, r30
 45e:	ff 27       	eor	r31, r31
 460:	93 58       	subi	r25, 0x83	; 131
 462:	5f 4f       	sbci	r21, 0xFF	; 255
 464:	2a f0       	brmi	.+10     	; 0x470 <__divsf3_pse+0x6c>
 466:	9e 3f       	cpi	r25, 0xFE	; 254
 468:	51 05       	cpc	r21, r1
 46a:	68 f0       	brcs	.+26     	; 0x486 <__divsf3_pse+0x82>
 46c:	b6 c0       	rjmp	.+364    	; 0x5da <__fp_inf>
 46e:	00 c1       	rjmp	.+512    	; 0x670 <__fp_szero>
 470:	5f 3f       	cpi	r21, 0xFF	; 255
 472:	ec f3       	brlt	.-6      	; 0x46e <__divsf3_pse+0x6a>
 474:	98 3e       	cpi	r25, 0xE8	; 232
 476:	dc f3       	brlt	.-10     	; 0x46e <__divsf3_pse+0x6a>
 478:	86 95       	lsr	r24
 47a:	77 95       	ror	r23
 47c:	67 95       	ror	r22
 47e:	b7 95       	ror	r27
 480:	f7 95       	ror	r31
 482:	9f 5f       	subi	r25, 0xFF	; 255
 484:	c9 f7       	brne	.-14     	; 0x478 <__divsf3_pse+0x74>
 486:	88 0f       	add	r24, r24
 488:	91 1d       	adc	r25, r1
 48a:	96 95       	lsr	r25
 48c:	87 95       	ror	r24
 48e:	97 f9       	bld	r25, 7
 490:	08 95       	ret
 492:	e1 e0       	ldi	r30, 0x01	; 1
 494:	66 0f       	add	r22, r22
 496:	77 1f       	adc	r23, r23
 498:	88 1f       	adc	r24, r24
 49a:	bb 1f       	adc	r27, r27
 49c:	62 17       	cp	r22, r18
 49e:	73 07       	cpc	r23, r19
 4a0:	84 07       	cpc	r24, r20
 4a2:	ba 07       	cpc	r27, r26
 4a4:	20 f0       	brcs	.+8      	; 0x4ae <__divsf3_pse+0xaa>
 4a6:	62 1b       	sub	r22, r18
 4a8:	73 0b       	sbc	r23, r19
 4aa:	84 0b       	sbc	r24, r20
 4ac:	ba 0b       	sbc	r27, r26
 4ae:	ee 1f       	adc	r30, r30
 4b0:	88 f7       	brcc	.-30     	; 0x494 <__divsf3_pse+0x90>
 4b2:	e0 95       	com	r30
 4b4:	08 95       	ret

000004b6 <__fixsfsi>:
 4b6:	04 d0       	rcall	.+8      	; 0x4c0 <__fixunssfsi>
 4b8:	68 94       	set
 4ba:	b1 11       	cpse	r27, r1
 4bc:	d9 c0       	rjmp	.+434    	; 0x670 <__fp_szero>
 4be:	08 95       	ret

000004c0 <__fixunssfsi>:
 4c0:	bc d0       	rcall	.+376    	; 0x63a <__fp_splitA>
 4c2:	88 f0       	brcs	.+34     	; 0x4e6 <__fixunssfsi+0x26>
 4c4:	9f 57       	subi	r25, 0x7F	; 127
 4c6:	90 f0       	brcs	.+36     	; 0x4ec <__fixunssfsi+0x2c>
 4c8:	b9 2f       	mov	r27, r25
 4ca:	99 27       	eor	r25, r25
 4cc:	b7 51       	subi	r27, 0x17	; 23
 4ce:	a0 f0       	brcs	.+40     	; 0x4f8 <__fixunssfsi+0x38>
 4d0:	d1 f0       	breq	.+52     	; 0x506 <__fixunssfsi+0x46>
 4d2:	66 0f       	add	r22, r22
 4d4:	77 1f       	adc	r23, r23
 4d6:	88 1f       	adc	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	1a f0       	brmi	.+6      	; 0x4e2 <__fixunssfsi+0x22>
 4dc:	ba 95       	dec	r27
 4de:	c9 f7       	brne	.-14     	; 0x4d2 <__fixunssfsi+0x12>
 4e0:	12 c0       	rjmp	.+36     	; 0x506 <__fixunssfsi+0x46>
 4e2:	b1 30       	cpi	r27, 0x01	; 1
 4e4:	81 f0       	breq	.+32     	; 0x506 <__fixunssfsi+0x46>
 4e6:	c3 d0       	rcall	.+390    	; 0x66e <__fp_zero>
 4e8:	b1 e0       	ldi	r27, 0x01	; 1
 4ea:	08 95       	ret
 4ec:	c0 c0       	rjmp	.+384    	; 0x66e <__fp_zero>
 4ee:	67 2f       	mov	r22, r23
 4f0:	78 2f       	mov	r23, r24
 4f2:	88 27       	eor	r24, r24
 4f4:	b8 5f       	subi	r27, 0xF8	; 248
 4f6:	39 f0       	breq	.+14     	; 0x506 <__fixunssfsi+0x46>
 4f8:	b9 3f       	cpi	r27, 0xF9	; 249
 4fa:	cc f3       	brlt	.-14     	; 0x4ee <__fixunssfsi+0x2e>
 4fc:	86 95       	lsr	r24
 4fe:	77 95       	ror	r23
 500:	67 95       	ror	r22
 502:	b3 95       	inc	r27
 504:	d9 f7       	brne	.-10     	; 0x4fc <__fixunssfsi+0x3c>
 506:	3e f4       	brtc	.+14     	; 0x516 <__fixunssfsi+0x56>
 508:	90 95       	com	r25
 50a:	80 95       	com	r24
 50c:	70 95       	com	r23
 50e:	61 95       	neg	r22
 510:	7f 4f       	sbci	r23, 0xFF	; 255
 512:	8f 4f       	sbci	r24, 0xFF	; 255
 514:	9f 4f       	sbci	r25, 0xFF	; 255
 516:	08 95       	ret

00000518 <__floatunsisf>:
 518:	e8 94       	clt
 51a:	09 c0       	rjmp	.+18     	; 0x52e <__floatsisf+0x12>

0000051c <__floatsisf>:
 51c:	97 fb       	bst	r25, 7
 51e:	3e f4       	brtc	.+14     	; 0x52e <__floatsisf+0x12>
 520:	90 95       	com	r25
 522:	80 95       	com	r24
 524:	70 95       	com	r23
 526:	61 95       	neg	r22
 528:	7f 4f       	sbci	r23, 0xFF	; 255
 52a:	8f 4f       	sbci	r24, 0xFF	; 255
 52c:	9f 4f       	sbci	r25, 0xFF	; 255
 52e:	99 23       	and	r25, r25
 530:	a9 f0       	breq	.+42     	; 0x55c <__floatsisf+0x40>
 532:	f9 2f       	mov	r31, r25
 534:	96 e9       	ldi	r25, 0x96	; 150
 536:	bb 27       	eor	r27, r27
 538:	93 95       	inc	r25
 53a:	f6 95       	lsr	r31
 53c:	87 95       	ror	r24
 53e:	77 95       	ror	r23
 540:	67 95       	ror	r22
 542:	b7 95       	ror	r27
 544:	f1 11       	cpse	r31, r1
 546:	f8 cf       	rjmp	.-16     	; 0x538 <__floatsisf+0x1c>
 548:	fa f4       	brpl	.+62     	; 0x588 <__floatsisf+0x6c>
 54a:	bb 0f       	add	r27, r27
 54c:	11 f4       	brne	.+4      	; 0x552 <__floatsisf+0x36>
 54e:	60 ff       	sbrs	r22, 0
 550:	1b c0       	rjmp	.+54     	; 0x588 <__floatsisf+0x6c>
 552:	6f 5f       	subi	r22, 0xFF	; 255
 554:	7f 4f       	sbci	r23, 0xFF	; 255
 556:	8f 4f       	sbci	r24, 0xFF	; 255
 558:	9f 4f       	sbci	r25, 0xFF	; 255
 55a:	16 c0       	rjmp	.+44     	; 0x588 <__floatsisf+0x6c>
 55c:	88 23       	and	r24, r24
 55e:	11 f0       	breq	.+4      	; 0x564 <__floatsisf+0x48>
 560:	96 e9       	ldi	r25, 0x96	; 150
 562:	11 c0       	rjmp	.+34     	; 0x586 <__floatsisf+0x6a>
 564:	77 23       	and	r23, r23
 566:	21 f0       	breq	.+8      	; 0x570 <__floatsisf+0x54>
 568:	9e e8       	ldi	r25, 0x8E	; 142
 56a:	87 2f       	mov	r24, r23
 56c:	76 2f       	mov	r23, r22
 56e:	05 c0       	rjmp	.+10     	; 0x57a <__floatsisf+0x5e>
 570:	66 23       	and	r22, r22
 572:	71 f0       	breq	.+28     	; 0x590 <__floatsisf+0x74>
 574:	96 e8       	ldi	r25, 0x86	; 134
 576:	86 2f       	mov	r24, r22
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	2a f0       	brmi	.+10     	; 0x588 <__floatsisf+0x6c>
 57e:	9a 95       	dec	r25
 580:	66 0f       	add	r22, r22
 582:	77 1f       	adc	r23, r23
 584:	88 1f       	adc	r24, r24
 586:	da f7       	brpl	.-10     	; 0x57e <__floatsisf+0x62>
 588:	88 0f       	add	r24, r24
 58a:	96 95       	lsr	r25
 58c:	87 95       	ror	r24
 58e:	97 f9       	bld	r25, 7
 590:	08 95       	ret

00000592 <__fp_cmp>:
 592:	99 0f       	add	r25, r25
 594:	00 08       	sbc	r0, r0
 596:	55 0f       	add	r21, r21
 598:	aa 0b       	sbc	r26, r26
 59a:	e0 e8       	ldi	r30, 0x80	; 128
 59c:	fe ef       	ldi	r31, 0xFE	; 254
 59e:	16 16       	cp	r1, r22
 5a0:	17 06       	cpc	r1, r23
 5a2:	e8 07       	cpc	r30, r24
 5a4:	f9 07       	cpc	r31, r25
 5a6:	c0 f0       	brcs	.+48     	; 0x5d8 <__fp_cmp+0x46>
 5a8:	12 16       	cp	r1, r18
 5aa:	13 06       	cpc	r1, r19
 5ac:	e4 07       	cpc	r30, r20
 5ae:	f5 07       	cpc	r31, r21
 5b0:	98 f0       	brcs	.+38     	; 0x5d8 <__fp_cmp+0x46>
 5b2:	62 1b       	sub	r22, r18
 5b4:	73 0b       	sbc	r23, r19
 5b6:	84 0b       	sbc	r24, r20
 5b8:	95 0b       	sbc	r25, r21
 5ba:	39 f4       	brne	.+14     	; 0x5ca <__fp_cmp+0x38>
 5bc:	0a 26       	eor	r0, r26
 5be:	61 f0       	breq	.+24     	; 0x5d8 <__fp_cmp+0x46>
 5c0:	23 2b       	or	r18, r19
 5c2:	24 2b       	or	r18, r20
 5c4:	25 2b       	or	r18, r21
 5c6:	21 f4       	brne	.+8      	; 0x5d0 <__fp_cmp+0x3e>
 5c8:	08 95       	ret
 5ca:	0a 26       	eor	r0, r26
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <__fp_cmp+0x3e>
 5ce:	a1 40       	sbci	r26, 0x01	; 1
 5d0:	a6 95       	lsr	r26
 5d2:	8f ef       	ldi	r24, 0xFF	; 255
 5d4:	81 1d       	adc	r24, r1
 5d6:	81 1d       	adc	r24, r1
 5d8:	08 95       	ret

000005da <__fp_inf>:
 5da:	97 f9       	bld	r25, 7
 5dc:	9f 67       	ori	r25, 0x7F	; 127
 5de:	80 e8       	ldi	r24, 0x80	; 128
 5e0:	70 e0       	ldi	r23, 0x00	; 0
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	08 95       	ret

000005e6 <__fp_nan>:
 5e6:	9f ef       	ldi	r25, 0xFF	; 255
 5e8:	80 ec       	ldi	r24, 0xC0	; 192
 5ea:	08 95       	ret

000005ec <__fp_pscA>:
 5ec:	00 24       	eor	r0, r0
 5ee:	0a 94       	dec	r0
 5f0:	16 16       	cp	r1, r22
 5f2:	17 06       	cpc	r1, r23
 5f4:	18 06       	cpc	r1, r24
 5f6:	09 06       	cpc	r0, r25
 5f8:	08 95       	ret

000005fa <__fp_pscB>:
 5fa:	00 24       	eor	r0, r0
 5fc:	0a 94       	dec	r0
 5fe:	12 16       	cp	r1, r18
 600:	13 06       	cpc	r1, r19
 602:	14 06       	cpc	r1, r20
 604:	05 06       	cpc	r0, r21
 606:	08 95       	ret

00000608 <__fp_round>:
 608:	09 2e       	mov	r0, r25
 60a:	03 94       	inc	r0
 60c:	00 0c       	add	r0, r0
 60e:	11 f4       	brne	.+4      	; 0x614 <__fp_round+0xc>
 610:	88 23       	and	r24, r24
 612:	52 f0       	brmi	.+20     	; 0x628 <__fp_round+0x20>
 614:	bb 0f       	add	r27, r27
 616:	40 f4       	brcc	.+16     	; 0x628 <__fp_round+0x20>
 618:	bf 2b       	or	r27, r31
 61a:	11 f4       	brne	.+4      	; 0x620 <__fp_round+0x18>
 61c:	60 ff       	sbrs	r22, 0
 61e:	04 c0       	rjmp	.+8      	; 0x628 <__fp_round+0x20>
 620:	6f 5f       	subi	r22, 0xFF	; 255
 622:	7f 4f       	sbci	r23, 0xFF	; 255
 624:	8f 4f       	sbci	r24, 0xFF	; 255
 626:	9f 4f       	sbci	r25, 0xFF	; 255
 628:	08 95       	ret

0000062a <__fp_split3>:
 62a:	57 fd       	sbrc	r21, 7
 62c:	90 58       	subi	r25, 0x80	; 128
 62e:	44 0f       	add	r20, r20
 630:	55 1f       	adc	r21, r21
 632:	59 f0       	breq	.+22     	; 0x64a <__fp_splitA+0x10>
 634:	5f 3f       	cpi	r21, 0xFF	; 255
 636:	71 f0       	breq	.+28     	; 0x654 <__fp_splitA+0x1a>
 638:	47 95       	ror	r20

0000063a <__fp_splitA>:
 63a:	88 0f       	add	r24, r24
 63c:	97 fb       	bst	r25, 7
 63e:	99 1f       	adc	r25, r25
 640:	61 f0       	breq	.+24     	; 0x65a <__fp_splitA+0x20>
 642:	9f 3f       	cpi	r25, 0xFF	; 255
 644:	79 f0       	breq	.+30     	; 0x664 <__fp_splitA+0x2a>
 646:	87 95       	ror	r24
 648:	08 95       	ret
 64a:	12 16       	cp	r1, r18
 64c:	13 06       	cpc	r1, r19
 64e:	14 06       	cpc	r1, r20
 650:	55 1f       	adc	r21, r21
 652:	f2 cf       	rjmp	.-28     	; 0x638 <__fp_split3+0xe>
 654:	46 95       	lsr	r20
 656:	f1 df       	rcall	.-30     	; 0x63a <__fp_splitA>
 658:	08 c0       	rjmp	.+16     	; 0x66a <__fp_splitA+0x30>
 65a:	16 16       	cp	r1, r22
 65c:	17 06       	cpc	r1, r23
 65e:	18 06       	cpc	r1, r24
 660:	99 1f       	adc	r25, r25
 662:	f1 cf       	rjmp	.-30     	; 0x646 <__fp_splitA+0xc>
 664:	86 95       	lsr	r24
 666:	71 05       	cpc	r23, r1
 668:	61 05       	cpc	r22, r1
 66a:	08 94       	sec
 66c:	08 95       	ret

0000066e <__fp_zero>:
 66e:	e8 94       	clt

00000670 <__fp_szero>:
 670:	bb 27       	eor	r27, r27
 672:	66 27       	eor	r22, r22
 674:	77 27       	eor	r23, r23
 676:	cb 01       	movw	r24, r22
 678:	97 f9       	bld	r25, 7
 67a:	08 95       	ret

0000067c <__mulsf3>:
 67c:	0a d0       	rcall	.+20     	; 0x692 <__mulsf3x>
 67e:	c4 cf       	rjmp	.-120    	; 0x608 <__fp_round>
 680:	b5 df       	rcall	.-150    	; 0x5ec <__fp_pscA>
 682:	28 f0       	brcs	.+10     	; 0x68e <__mulsf3+0x12>
 684:	ba df       	rcall	.-140    	; 0x5fa <__fp_pscB>
 686:	18 f0       	brcs	.+6      	; 0x68e <__mulsf3+0x12>
 688:	95 23       	and	r25, r21
 68a:	09 f0       	breq	.+2      	; 0x68e <__mulsf3+0x12>
 68c:	a6 cf       	rjmp	.-180    	; 0x5da <__fp_inf>
 68e:	ab cf       	rjmp	.-170    	; 0x5e6 <__fp_nan>
 690:	ef cf       	rjmp	.-34     	; 0x670 <__fp_szero>

00000692 <__mulsf3x>:
 692:	cb df       	rcall	.-106    	; 0x62a <__fp_split3>
 694:	a8 f3       	brcs	.-22     	; 0x680 <__mulsf3+0x4>

00000696 <__mulsf3_pse>:
 696:	99 23       	and	r25, r25
 698:	d9 f3       	breq	.-10     	; 0x690 <__mulsf3+0x14>
 69a:	55 23       	and	r21, r21
 69c:	c9 f3       	breq	.-14     	; 0x690 <__mulsf3+0x14>
 69e:	95 0f       	add	r25, r21
 6a0:	50 e0       	ldi	r21, 0x00	; 0
 6a2:	55 1f       	adc	r21, r21
 6a4:	aa 27       	eor	r26, r26
 6a6:	ee 27       	eor	r30, r30
 6a8:	ff 27       	eor	r31, r31
 6aa:	bb 27       	eor	r27, r27
 6ac:	00 24       	eor	r0, r0
 6ae:	08 94       	sec
 6b0:	67 95       	ror	r22
 6b2:	20 f4       	brcc	.+8      	; 0x6bc <__mulsf3_pse+0x26>
 6b4:	e2 0f       	add	r30, r18
 6b6:	f3 1f       	adc	r31, r19
 6b8:	b4 1f       	adc	r27, r20
 6ba:	0a 1e       	adc	r0, r26
 6bc:	22 0f       	add	r18, r18
 6be:	33 1f       	adc	r19, r19
 6c0:	44 1f       	adc	r20, r20
 6c2:	aa 1f       	adc	r26, r26
 6c4:	66 95       	lsr	r22
 6c6:	a9 f7       	brne	.-22     	; 0x6b2 <__mulsf3_pse+0x1c>
 6c8:	77 95       	ror	r23
 6ca:	30 f4       	brcc	.+12     	; 0x6d8 <__mulsf3_pse+0x42>
 6cc:	f3 0f       	add	r31, r19
 6ce:	b4 1f       	adc	r27, r20
 6d0:	0a 1e       	adc	r0, r26
 6d2:	12 1e       	adc	r1, r18
 6d4:	08 f4       	brcc	.+2      	; 0x6d8 <__mulsf3_pse+0x42>
 6d6:	63 95       	inc	r22
 6d8:	33 0f       	add	r19, r19
 6da:	44 1f       	adc	r20, r20
 6dc:	aa 1f       	adc	r26, r26
 6de:	22 1f       	adc	r18, r18
 6e0:	76 95       	lsr	r23
 6e2:	99 f7       	brne	.-26     	; 0x6ca <__mulsf3_pse+0x34>
 6e4:	87 95       	ror	r24
 6e6:	20 f4       	brcc	.+8      	; 0x6f0 <__mulsf3_pse+0x5a>
 6e8:	b4 0f       	add	r27, r20
 6ea:	0a 1e       	adc	r0, r26
 6ec:	12 1e       	adc	r1, r18
 6ee:	63 1f       	adc	r22, r19
 6f0:	44 0f       	add	r20, r20
 6f2:	aa 1f       	adc	r26, r26
 6f4:	22 1f       	adc	r18, r18
 6f6:	33 1f       	adc	r19, r19
 6f8:	86 95       	lsr	r24
 6fa:	a9 f7       	brne	.-22     	; 0x6e6 <__mulsf3_pse+0x50>
 6fc:	86 2f       	mov	r24, r22
 6fe:	71 2d       	mov	r23, r1
 700:	60 2d       	mov	r22, r0
 702:	11 24       	eor	r1, r1
 704:	9f 57       	subi	r25, 0x7F	; 127
 706:	50 40       	sbci	r21, 0x00	; 0
 708:	8a f0       	brmi	.+34     	; 0x72c <__mulsf3_pse+0x96>
 70a:	e1 f0       	breq	.+56     	; 0x744 <__mulsf3_pse+0xae>
 70c:	88 23       	and	r24, r24
 70e:	4a f0       	brmi	.+18     	; 0x722 <__mulsf3_pse+0x8c>
 710:	ee 0f       	add	r30, r30
 712:	ff 1f       	adc	r31, r31
 714:	bb 1f       	adc	r27, r27
 716:	66 1f       	adc	r22, r22
 718:	77 1f       	adc	r23, r23
 71a:	88 1f       	adc	r24, r24
 71c:	91 50       	subi	r25, 0x01	; 1
 71e:	50 40       	sbci	r21, 0x00	; 0
 720:	a9 f7       	brne	.-22     	; 0x70c <__mulsf3_pse+0x76>
 722:	9e 3f       	cpi	r25, 0xFE	; 254
 724:	51 05       	cpc	r21, r1
 726:	70 f0       	brcs	.+28     	; 0x744 <__mulsf3_pse+0xae>
 728:	58 cf       	rjmp	.-336    	; 0x5da <__fp_inf>
 72a:	a2 cf       	rjmp	.-188    	; 0x670 <__fp_szero>
 72c:	5f 3f       	cpi	r21, 0xFF	; 255
 72e:	ec f3       	brlt	.-6      	; 0x72a <__mulsf3_pse+0x94>
 730:	98 3e       	cpi	r25, 0xE8	; 232
 732:	dc f3       	brlt	.-10     	; 0x72a <__mulsf3_pse+0x94>
 734:	86 95       	lsr	r24
 736:	77 95       	ror	r23
 738:	67 95       	ror	r22
 73a:	b7 95       	ror	r27
 73c:	f7 95       	ror	r31
 73e:	e7 95       	ror	r30
 740:	9f 5f       	subi	r25, 0xFF	; 255
 742:	c1 f7       	brne	.-16     	; 0x734 <__mulsf3_pse+0x9e>
 744:	fe 2b       	or	r31, r30
 746:	88 0f       	add	r24, r24
 748:	91 1d       	adc	r25, r1
 74a:	96 95       	lsr	r25
 74c:	87 95       	ror	r24
 74e:	97 f9       	bld	r25, 7
 750:	08 95       	ret

00000752 <__mulhi3>:
 752:	00 24       	eor	r0, r0
 754:	55 27       	eor	r21, r21
 756:	04 c0       	rjmp	.+8      	; 0x760 <__mulhi3+0xe>
 758:	08 0e       	add	r0, r24
 75a:	59 1f       	adc	r21, r25
 75c:	88 0f       	add	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	00 97       	sbiw	r24, 0x00	; 0
 762:	29 f0       	breq	.+10     	; 0x76e <__mulhi3+0x1c>
 764:	76 95       	lsr	r23
 766:	67 95       	ror	r22
 768:	b8 f3       	brcs	.-18     	; 0x758 <__mulhi3+0x6>
 76a:	71 05       	cpc	r23, r1
 76c:	b9 f7       	brne	.-18     	; 0x75c <__mulhi3+0xa>
 76e:	80 2d       	mov	r24, r0
 770:	95 2f       	mov	r25, r21
 772:	08 95       	ret

00000774 <__divmodhi4>:
 774:	97 fb       	bst	r25, 7
 776:	07 2e       	mov	r0, r23
 778:	16 f4       	brtc	.+4      	; 0x77e <__divmodhi4+0xa>
 77a:	00 94       	com	r0
 77c:	06 d0       	rcall	.+12     	; 0x78a <__divmodhi4_neg1>
 77e:	77 fd       	sbrc	r23, 7
 780:	08 d0       	rcall	.+16     	; 0x792 <__divmodhi4_neg2>
 782:	0b d0       	rcall	.+22     	; 0x79a <__udivmodhi4>
 784:	07 fc       	sbrc	r0, 7
 786:	05 d0       	rcall	.+10     	; 0x792 <__divmodhi4_neg2>
 788:	3e f4       	brtc	.+14     	; 0x798 <__divmodhi4_exit>

0000078a <__divmodhi4_neg1>:
 78a:	90 95       	com	r25
 78c:	81 95       	neg	r24
 78e:	9f 4f       	sbci	r25, 0xFF	; 255
 790:	08 95       	ret

00000792 <__divmodhi4_neg2>:
 792:	70 95       	com	r23
 794:	61 95       	neg	r22
 796:	7f 4f       	sbci	r23, 0xFF	; 255

00000798 <__divmodhi4_exit>:
 798:	08 95       	ret

0000079a <__udivmodhi4>:
 79a:	aa 1b       	sub	r26, r26
 79c:	bb 1b       	sub	r27, r27
 79e:	51 e1       	ldi	r21, 0x11	; 17
 7a0:	07 c0       	rjmp	.+14     	; 0x7b0 <__udivmodhi4_ep>

000007a2 <__udivmodhi4_loop>:
 7a2:	aa 1f       	adc	r26, r26
 7a4:	bb 1f       	adc	r27, r27
 7a6:	a6 17       	cp	r26, r22
 7a8:	b7 07       	cpc	r27, r23
 7aa:	10 f0       	brcs	.+4      	; 0x7b0 <__udivmodhi4_ep>
 7ac:	a6 1b       	sub	r26, r22
 7ae:	b7 0b       	sbc	r27, r23

000007b0 <__udivmodhi4_ep>:
 7b0:	88 1f       	adc	r24, r24
 7b2:	99 1f       	adc	r25, r25
 7b4:	5a 95       	dec	r21
 7b6:	a9 f7       	brne	.-22     	; 0x7a2 <__udivmodhi4_loop>
 7b8:	80 95       	com	r24
 7ba:	90 95       	com	r25
 7bc:	bc 01       	movw	r22, r24
 7be:	cd 01       	movw	r24, r26
 7c0:	08 95       	ret

000007c2 <_exit>:
 7c2:	f8 94       	cli

000007c4 <__stop_program>:
 7c4:	ff cf       	rjmp	.-2      	; 0x7c4 <__stop_program>
